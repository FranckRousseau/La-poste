#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Dec 17 11:17:15 2019

@author: rousseau
"""
##Importation des librairies

from sqlalchemy.sql import text
from sqlalchemy import create_engine
import configparser
import os
import pandas as pd

#Mise en place des coordonnées de la base

config = configparser.ConfigParser()
config.read_file(open(os.path.expanduser("~/datalab.cnf")))

TBL = "service"
CNF = "pgBDD"

##Configuration de connexion avec PostgreSQL

pgSQLengine = create_engine("postgresql://%s:%s@%s/%s" % (config[CNF]['user'], config[CNF]['password'], config[CNF]['host'], "BDD_Franck"))
print(pgSQLengine)

##Création d'une dataframe à partir d'un fichier CSV

URL = '/home/rousseau/Projet5/CSV/service.csv'

df_collect= pd.DataFrame()
df_collect = pd.DataFrame(columns=['id_serv','servid', 'serv_site','serv_adresse','serv_postal','serv_loc','serv_insee','serv_lat','serv_long','serv_monnaie','serv_billets','serv_timbres','serv_libre'])
df_collect = pd.read_csv(URL, encoding = 'utf8', sep=',')


###Verifications 1. Traiter les doublons

duplicateRowsDF = df_collect[df_collect.duplicated([ 'servid', 'serv_site','serv_adresse','serv_postal','serv_loc','serv_insee','serv_lat','serv_long','serv_monnaie','serv_billets','serv_timbres','serv_libre'])]
len(duplicateRowsDF.index)


##Création des tables et implémentations dans PostgreSQL

pgSQLengine.execute("""CREATE TABLE IF NOT EXISTS "service"(
   id_serv INTEGER GENERATED BY DEFAULT AS IDENTITY,
   servid character(8) NOT NULL,
   serv_site character(50) NOT NULL,
   serv_adresse character(50) NOT NULL,
   serv_postal character(5) NOT NULL,
   serv_loc character(50) NOT NULL,
   serv_insee character(6) NOT NULL,
   serv_lat decimal NOT NULL,
   serv_long decimal NOT NULL,
   serv_monnaie character(5) NULL,
   serv_billets character(5) NULL,
   serv_timbres character(5) NULL,
   serv_libre character(5) NULL
);""")

statement = text("""
INSERT INTO "service" (id_serv,servid, serv_site,serv_adresse,serv_postal,serv_loc,serv_insee,serv_lat,serv_long,serv_monnaie,serv_billets,serv_timbres,serv_libre)
VALUES (:id_serv,:servid,:serv_site,:serv_adresse,:serv_postal,:serv_loc,:serv_insee,:serv_lat,:serv_long,:serv_monnnaie,:serv_billets,:serv_timbres,:serv_libre)""")

df_collect.to_sql('service', pgSQLengine, if_exists='append', index=False)






