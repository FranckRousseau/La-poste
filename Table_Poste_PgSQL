#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 28 09:36:40 2020

@author: rousseau
"""

##Importation des librairies

from sqlalchemy.sql import text
from sqlalchemy import create_engine
import configparser
import os
import pandas as pd

#Mise en place des coordonnées de la base

config = configparser.ConfigParser()
config.read_file(open(os.path.expanduser("~/datalab.cnf")))

TBL = "poste"
CNF = "pgBDD"

##Configuration de connexion avec PostgreSQL

pgSQLengine = create_engine("postgresql://%s:%s@%s/%s" % (config[CNF]['user'], config[CNF]['password'], config[CNF]['host'], "BDD_Franck"))
print(pgSQLengine)

##Création d'une dataframe à partir d'un fichier CSV

URL = '/home/rousseau/Projet5/CSV/poste.csv'

df_collect= pd.DataFrame()
df_collect = pd.DataFrame(columns=['id_poste','posteid', 'poste_site','poste_adresse','poste_postal','poste_loc','poste_insee','poste_lat','poste_long'])
df_collect = pd.read_csv(URL, encoding = 'utf8', sep=',')

###Verifications 1. Traitée les doublons

duplicateRowsDF = df_collect[df_collect.duplicated([ 'posteid', 'poste_site','poste_adresse','poste_postal','poste_loc','poste_insee','poste_lat','poste_long'])]
len(duplicateRowsDF.index)

##Création des tables et implémentation dans PostgreSQL

pgSQLengine.execute("""CREATE TABLE public.poste
(
    id_poste integer NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    posteid character(8) COLLATE pg_catalog."default" NOT NULL,
    poste_site character(50) COLLATE pg_catalog."default" NOT NULL,
    poste_adresse character(50) COLLATE pg_catalog."default" NOT NULL,
    poste_postal character(5) COLLATE pg_catalog."default" NOT NULL,
    poste_loc character(50) COLLATE pg_catalog."default" NOT NULL,
    poste_insee character(6) COLLATE pg_catalog."default" NOT NULL,
    poste_lat numeric NOT NULL,
    poste_long numeric NOT NULL,
    CONSTRAINT service_servid_site PRIMARY KEY (id_poste),
    CONSTRAINT service_id_serv FOREIGN KEY (id_poste)
        REFERENCES public.automate (id_auto) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
);""")

statement = text("""
INSERT INTO "poste" (id_poste,posteid, poste_site,poste_adresse,poste_postal,poste_loc,poste_insee,poste_lat,poste_long)
VALUES (:id_poste,:posteid, :poste_site,:poste_adresse,:poste_postal,:poste_loc,:poste_insee,:poste_lat,:poste_long)""")

df_collect.to_sql('poste', pgSQLengine, if_exists='append', index=False)

